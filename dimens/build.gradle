apply plugin: 'com.novoda.bintray-release'
apply plugin: 'com.android.library'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 16
    }
}

publish {
    def groupProjectID = 'com.ui.optimize'
    def artifactProjectID = 'dimens'
    def publishVersionID = '1.5.0'

    userOrg = 'Sardari'
    repoName = 'Dimens'
    groupId = groupProjectID
    artifactId = artifactProjectID
    publishVersion = publishVersionID
    desc = 'An Android library that contains the dimensions you need to building a responsive UI in Android.'
    website = 'https://github.com/ali-sardari/Dimens'
}

//=============DP Task==============================
class DPFactory extends DefaultTask {

    @Input
    String unit = "dp"

    @Input
    double positiveMax = 600

    @Input
    double negativeMax = 60

    @TaskAction
    def create() {
        String resFolder = project.getProjectDir().getPath() + "/src/main/res/"

        //region Default Values Positive
        String folder = resFolder + "values"
        String fileName = folder + "/positive_dp.xml"
        new File(folder).mkdir()
        new File(fileName).createNewFile()
        PrintWriter printWriter = new PrintWriter(fileName)
        printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
        printWriter.println("<resources>")
        for (int i = 1; i <= positiveMax; i++) {
            double ratio = i / 300d
            double dp = ratio * 300
            printWriter.printf("\t<dimen name=\"_%ddp\">%.2f" + unit + "</dimen>\r\n", i, dp)
        }
        printWriter.println("</resources>")
        printWriter.close()
        //endregion

        //region Default Values Negative
        folder = resFolder + "values"
        fileName = folder + "/negative_dp.xml"
        new File(folder).mkdir()
        new File(fileName).createNewFile()
        printWriter = new PrintWriter(fileName)
        printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
        printWriter.println("<resources>")
        for (int i = 1; i <= negativeMax; i++) {
            double ratio = i / 300d
            double dp = ratio * 300
            printWriter.printf("\t<dimen name=\"_minus_%ddp\">%.2f" + unit + "</dimen>\r\n", i, -dp)
        }
        printWriter.println("</resources>")
        printWriter.close()
        //endregion

        //region Positive
        for (double dimen = 300; dimen <= 800; dimen = dimen + 30) {
            folder = resFolder + "values-sw" + (int) dimen + "dp"
            fileName = folder + "/positive_dp.xml"
            new File(folder).mkdir()
            new File(fileName).createNewFile()
            printWriter = new PrintWriter(fileName)
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            printWriter.println("<resources>")
            for (int i = 1; i <= positiveMax; i++) {
                double ratio = i / 300d
                double dp = ratio * dimen
                printWriter.printf("\t<dimen name=\"_%ddp\">%.2f" + unit + "</dimen>\r\n", i, dp)
            }
            printWriter.println("</resources>")
            printWriter.close()
        }
        //endregion

        //region Negative
        for (double dimen = 300; dimen <= 800; dimen = dimen + 30) {
            folder = resFolder + "values-sw" + (int) dimen + "dp"
            fileName = folder + "/negative_dp.xml"
            new File(folder).mkdir()
            new File(fileName).createNewFile()
            printWriter = new PrintWriter(fileName)
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            printWriter.println("<resources>")
            for (int i = 1; i <= negativeMax; i++) {
                double ratio = i / 300d
                double dp = ratio * dimen
                printWriter.printf("\t<dimen name=\"_minus_%ddp\">%.2f" + unit + "</dimen>\r\n", i, -dp)
            }
            printWriter.println("</resources>")
            printWriter.close()
        }
        //endregion
    }
}

task createDP(type: DPFactory) {
}

createDP {
    unit = "dp"
    positiveMax = 600//change to 600 or any other value if needed
    negativeMax = 60//change to 600 or any other value if needed
}

//=============SP Task==============================
class SPFactory extends DefaultTask {

    @Input
    String unit = "sp"

    @Input
    double positiveMax = 100

    @TaskAction
    def create() {
        String resFolder = project.getProjectDir().getPath() + "/src/main/res/"

        //region Default Values
        String folder = resFolder + "values"
        String fileName = folder + "/positive_sp.xml"
        new File(folder).mkdir()
        new File(fileName).createNewFile()
        PrintWriter printWriter = new PrintWriter(fileName)
        printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
        printWriter.println("<resources>")
        for (int i = 1; i <= positiveMax; i++) {
            double ratio = i / 300d
            double sp = ratio * 300
            printWriter.printf("\t<dimen name=\"_%dsp\">%.2f" + unit + "</dimen>\r\n", i, sp)
        }
        printWriter.println("</resources>")
        printWriter.close()
        //endregion

        for (double dimen = 300; dimen <= 800; dimen = dimen + 30) {
            createPositive(resFolder, dimen)
        }

        createPositive(resFolder, 1080)
    }

    private void createPositive(String resFolder, double dimen) {
        String folder = resFolder + "values-sw" + (int) dimen + "dp"
        String fileName = folder + "/positive_sp.xml"
        new File(folder).mkdir()
        new File(fileName).createNewFile()
        PrintWriter printWriter = new PrintWriter(fileName)
        printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
        printWriter.println("<resources>")
        for (int i = 1; i <= positiveMax; i++) {
            double ratio = i / 300d
            double sp = ratio * dimen
            printWriter.printf("\t<dimen name=\"_%dsp\">%.2f" + unit + "</dimen>\r\n", i, sp)
        }
        printWriter.println("</resources>")
        printWriter.close()
    }
}

task createSP(type: SPFactory) {
}

createSP {
    unit = "sp"
    positiveMax = 100//change to 600 or any other value if needed
}